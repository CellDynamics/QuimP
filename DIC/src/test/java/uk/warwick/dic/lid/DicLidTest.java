/**
 * 
 */
package uk.warwick.dic.lid;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

import ij.*;
import ij.gui.WaitForUserDialog;

/**
 * @author baniuk
 *
 */
public class DicLidTest extends DicLid {

	private static ImagePlus image; // test image generated by Matlab script
	
	/**
	 * Calls superclass constructor and pass to it image
	 * Image is loaded in setUpBeforeClass() method which is static as well as image variable
	 */
	public DicLidTest() {
		super(image);
		// TODO Auto-generated constructor stub
	}

	/**
	 * Runs once on beginning of all tests
	 * Opens test image and create Matlab exchange file
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		//image = IJ.openImage("src/test/java/uk/warwick/dic/lid/testObject.tif"); // opens test image
		//TODO Move rather to Before/After
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		//image.close();
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Test method for {@link uk.warwick.dic.lid.DicLid#DicLid(ImagePlus)}. 
	 */
	@Ignore
	@Test
	public void testDicLid() {
		fail("Not yet implemented");
	}//TODO Add doxygen test marks 

	/**
	 * Test method for {@link uk.warwick.dic.lid.DicLid#fillDiagonals()}.
	 */
	@Ignore
	@Test
	public void testFillDiagonals() {
		fillDiagonals();
		int[][] tmpDiag = getDiagonals();
//		log.log(Level.FINE, "Diag array size "+tmpDiag.length);
		assertEquals("Main diagonal should be of image size", 513, tmpDiag[512].length); // middle diagonal (from 0) has size of image
		assertEquals("First diagonal (left top) should have one point", 1, tmpDiag[0].length); 	// first and last have 1
		assertEquals("Last diagonal should hava only one point", 1, tmpDiag[1024].length); 
		assertEquals("Testing if tmpDiag has correct length - rows+cols-1 to not count main diagonal double",513*2-1,tmpDiag.length);
	}

	/**
	 * Test method for {@link uk.warwick.dic.lid.DicLid#lineInetgration(float, double, int)}.
	 */
	@Test
	@Ignore
	public void testLineInetgration() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link uk.warwick.dic.lid.DicLid#DICReconstructionLID(float, double, int)}.
	 */
	@Test
	@Ignore
	public void testDICReconstructionLID() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link uk.warwick.dic.lid.DicLid#getDiagonals()}.
	 */
	@Test
	@Ignore
	public void testGetDiagonals() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link uk.warwick.dic.lid.DicLid#getoutImage()}.
	 */
	@Test
	@Ignore
	public void testGetoutImage() {
		fail("Not yet implemented");
	}
	
	@Ignore("Just shows loaded image and stops execution of other tests")
	@Test
	public void testOfLoadedImage() {
		image.show();
		new WaitForUserDialog("Do something, then click OK.").show();
	}

}
