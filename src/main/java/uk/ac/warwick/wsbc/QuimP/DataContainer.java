package uk.ac.warwick.wsbc.QuimP;

import java.lang.reflect.Type;

import com.google.gson.InstanceCreator;

/**
 * Keep outputs from every module of QuimP.
 * 
 * All modules can add here their configuration sets. This structure is used for exchanging data
 * between modules. It can be dynamically modified.
 * 
 * @author p.baniukiewicz
 *
 */
public class DataContainer implements IQuimpSerialize {

    /**
     * Object to store all BOA state. Can be <tt>null</tt> when module has not been run yet.
     */
    public BOAState BOAState;
    /**
     * Object to store ECCM output. Can be <tt>null</tt> when module has not been run yet.
     */
    public OutlineHandlers ECMMState;
    /**
     * Store maps generated by Q Analysis plugin for every OutlineHandler from ECMMState. 
     * Can be <tt>null</tt> when module has not been run yet.
     * <p>
     * The order of STmap object in this array is correlated with the order of OutlineHandlers in
     * <tt>ECMMState</tt>, thus <i>n-th</i> STmap has been calculated from <i>n-th</i> Outline by
     * Q Analysis module.
     */
    public STmap[] QState;
    private transient PluginFactory pf;
    private transient ViewUpdater vu;

    /**
     * Default constructor. Create empty data containers.
     */
    public DataContainer() {
        BOAState = null;
        ECMMState = null;
        QState = null;
    }

    /**
     * Create DataContainer with attached {@link PluginFactory PluginFactory} and 
     * {@link ViewUpdater ViewUpdater}.
     * 
     * @param pf {@link PluginFactory PluginFactory} object reference
     * @param vu {@link ViewUpdater ViewUpdater} object reference
     */
    public DataContainer(final PluginFactory pf, final ViewUpdater vu) {
        this();
        this.pf = pf;
        this.vu = vu;
    }

    /**
     * Called before serialization. 
     * <p>
     * Call similar method for all stored object allowing them for self-preparation for normal
     * operations after loading
     */
    @Override
    public void beforeSerialize() {
        if (BOAState != null)
            BOAState.beforeSerialize(); // serialize first stored data
        if (ECMMState != null)
            ECMMState.beforeSerialize(); // serialize second stored data
        if (QState != null)
            for (STmap stM : QState)
                if (stM != null)
                    stM.beforeSerialize();

    }

    /**
     * Called after serialization. 
     * <p>
     * Call similar method for all stored object allowing them for self-preparation for saving
     */
    @Override
    public void afterSerialize() throws Exception {
        if (BOAState != null) {
            BOAState.snakePluginList = new SnakePluginList(BOA_.NUM_SNAKE_PLUGINS, pf, vu);
            BOAState.afterSerialize();
            for (SnakePluginList sL : BOAState.snakePluginListSnapshots) {
                sL.updateRefs(pf, vu);
            }
        }
        if (ECMMState != null)
            ECMMState.afterSerialize();
        if (QState != null)
            for (STmap stM : QState)
                if (stM != null)
                    stM.afterSerialize();
    }
}

/**
 * Object builder for GSon and DataContainer class
 * 
 * This class is used on load JSon representation of DataContainer class. Rebuilds snakePluginList
 * field that is not serialized. This field keeps current state of plugins
 * 
 * @author p.baniukiewicz
 * @see GSon documentation
 */
class DataContainerInstanceCreator implements InstanceCreator<DataContainer> {

    private PluginFactory pf;
    private ViewUpdater vu;

    public DataContainerInstanceCreator(final PluginFactory pf, final ViewUpdater vu) {
        this.pf = pf;
        this.vu = vu;
    }

    @Override
    public DataContainer createInstance(Type arg0) {
        DataContainer dt = new DataContainer(pf, vu);
        return dt;
    }
}

@Deprecated
class InstanceCreatorForB implements InstanceCreator<BOAState.BOAp> {
    private final BOAState a;

    public InstanceCreatorForB(BOAState a) {
        this.a = a;
    }

    public BOAState.BOAp createInstance(Type type) {
        return a.new BOAp();
    }
}
