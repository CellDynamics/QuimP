package uk.ac.warwick.wsbc.QuimP.plugin.Prot_Analysis;

import java.awt.Polygon;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import uk.ac.warwick.wsbc.QuimP.STmap;
import uk.ac.warwick.wsbc.QuimP.geom.TrackMap;
import uk.ac.warwick.wsbc.QuimP.utils.QuimPArrayUtils;

/**
 * Track point using tracking map generated by {@link uk.ac.warwick.wsbc.QuimP.geom.TrackMap}.
 * @author baniuk
 *
 */
public class PointTracker {
    private static final Logger LOGGER = LogManager.getLogger(PointTracker.class.getName());

    public PointTracker() {
    }

    /**
     * Track maxima across motility map as long as they fulfil criterion of amplitude.
     * 
     * @param mapCell holds all maps generated and saved by QuimP
     * @param drop the value (in x/100) while velocity remains above of the peak speed. E.g for
     * drop=1 all tracked points are considered (along positive motility), drop=0.5 stands for 
     * points that are above 0.5*peakval, where peakval is the value of found maximum.  
     * @param maximaFinder properly initialized object that holds maxima of motility map. 
     * All maxima are tracked
     * @return List of points tracked from every maximum point as long as they meet criterion.
     * Maximum point can be included in this list depending on setting of 
     * {@link uk.ac.warwick.wsbc.QuimP.geom.TrackMap.includeFirst} flag. Points for one tracking 
     * line are packed into PolygonRoi object. Those objects alternate -
     * backwardM1,forwardM1,backwardM2,forwardM2,... where Mx is maximum point. The size of list 
     * is 2*number of maxima.
     * It can contain only one point (maximum if set
     * {@link uk.ac.warwick.wsbc.QuimP.geom.TrackMap.includeFirst}) or empty polygon if no point accepted. 
     */
    public List<Polygon> trackMaxima(final STmap mapCell, double drop,
            final MaximaFinder maximaFinder) {
        int numFrames = mapCell.motMap.length;
        ArrayList<Polygon> ret = new ArrayList<>();
        // int[] indexes = new int[numFrames];
        int[] framesF = null;
        int[] framesB = null;
        Polygon maxi = maximaFinder.getMaxima(); // restore computed maxima
        double[] maxValues = maximaFinder.getMaxValues(); // max values in order of maxi
        TrackMap trackMap = new TrackMap(mapCell.originMap, mapCell.coordMap); // build tracking map
        trackMap.includeFirst = true; // include also initial point
        int[] tForward = null;
        int[] tBackward = null;
        int N = 0;
        // iterate through all maxima - take only indexes (x)
        for (int i = 0; i < maxi.npoints; i++) {
            int index = maxi.xpoints[i]; // considered index
            int frame = maxi.ypoints[i]; // considered frame
            LOGGER.trace("Max = [" + frame + "," + index + "]");
            // trace forward every index until end of time
            tForward = trackMap.trackForward(frame, index, numFrames - frame);
            framesF = trackMap.getForwardFrames(frame, numFrames - frame);
            // trace backward every index until end of time
            tBackward = trackMap.trackBackward(frame, index, frame);
            framesB = trackMap.getBackwardFrames(frame, frame);
            QuimPArrayUtils.reverseIntArray(framesB); // reverse have last frame on 0 index
                                                      // (important for Polygon creation)
            QuimPArrayUtils.reverseIntArray(tBackward);
            // check where is drop off - index that has velocity below drop
            double dropValue = maxValues[i] - maxValues[i] * drop;

            for (N = 0; N < tBackward.length; N++) {
                // frames[N] = frame + N + 1; // store number of current frame for tracked point +1
                // because max point is not included in tForward (tForward[0] is for frame+1)
                if (tBackward[N] >= 0) {
                    double val = (mapCell.motMap[framesB[N]][tBackward[N]]);
                    if (val < dropValue)
                        break;
                }
            }
            N = (--N < 0) ? 0 : N; // now end is the last index that fulfill criterion
            LOGGER.trace("tBackward frames:" + Arrays.toString(framesB));
            ret.add(new Polygon(tBackward, framesB, N));

            for (N = 0; N < tForward.length; N++) {
                // frames[N] = frame + N + 1; // store number of current frame for tracked point +1
                // because max point is not included in tForward (tForward[0] is for frame+1)
                if (tForward[N] >= 0) {
                    double val = (mapCell.motMap[framesF[N]][tForward[N]]);
                    if (val < dropValue)
                        break;
                }
            }
            N = (--N < 0) ? 0 : N; // now end is the last index that fulfill criterion
            LOGGER.trace("tForward frames:" + Arrays.toString(framesF));
            ret.add(new Polygon(tForward, framesF, N));
        }
        return ret;
    }

    public Polygon getIntersectionPoints(List<Polygon> tracks) {
        Polygon ret = new Polygon();

        return ret;
    }

}
