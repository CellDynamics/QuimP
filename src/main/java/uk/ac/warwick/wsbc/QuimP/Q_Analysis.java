package uk.ac.warwick.wsbc.QuimP;

import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Iterator;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.config.Configurator;

import ij.IJ;
import ij.gui.GenericDialog;
import ij.gui.YesNoCancelDialog;
import ij.io.OpenDialog;

/**
 * Run Q analysis for ECMM data.
 * <p>
 * In principle this object loads and process name_X.paQP file generated by ECMM.  <i>X</i> in this
 * case means number of cell outline. The same result can be achieved by loading QCONF file that 
 * contains all outlines for given case. This class is designed to process one outline in one time.
 * Thus most of methods operate on current status private fields (such as \c qp, \c oH). 
 * The main analysis runner method is {@link #run()}, whereas support for both input formats is 
 * covered by {@link #runFromPAQP()} and {@link #runFromQCONF()} (similarly to 
 * {@link ECMM_Mapping ECMM_Mapping}) 
 *  
 * @author rtyson
 * @author p.baniukiewicz
 */
public class Q_Analysis {
    static {
        if (System.getProperty("quimp.debugLevel") == null)
            Configurator.initialize(null, "log4j2_default.xml");
        else
            Configurator.initialize(null, System.getProperty("quimp.debugLevel"));
    }
    private static final Logger LOGGER = LogManager.getLogger(Q_Analysis.class.getName());
    GenericDialog gd;
    private OutlineHandler oH; // keep loaded handler, can change during run
    private QParams qp;
    private STmap stMap; // object holding all maps evaluated for current OutlineHandler (oH)

    /**
     * Main constructor and runner - class entry point.
     * <p>
     * Left in this form for backward compatibility
     */
    public Q_Analysis() {
        this(null);
    }

    /**
     * Parameterized constructor for tests.
     * 
     * @param path Path to *.paQP/QCONF file. If <tt>null</tt> user is asked for this file
     */
    public Q_Analysis(Path path) {
        about();
        try {
            IJ.showStatus("QuimP Analysis");
            IJ.log(new Tool().getQuimPversion());
            String directory; // directory with paQP
            String filename; // file name of paQP

            if (path == null) { // no file provided, ask user
                OpenDialog od = new OpenDialog(
                        "Open paramater file (.paQP|" + BOAState.QCONFFILEEXT + ")...",
                        OpenDialog.getLastDirectory(), ".paQP");
                if (od.getFileName() == null) {
                    IJ.log("Cancelled - exiting...");
                    return;
                }
                directory = od.getDirectory();
                filename = od.getFileName();
            } else // use name provided in constructor
            {
                // getParent can return null
                directory = path.getParent() == null ? "" : path.getParent().toString();
                filename = path.getFileName() == null ? "" : path.getFileName().toString();
                LOGGER.debug("Use provided file:" + directory + " " + filename);
            }
            // detect old/new file format
            File paramFile = new File(directory, filename); // config file
            if (paramFile.getName().endsWith(BOAState.QCONFFILEEXT)) // new file format TODO #152
                qp = new QParamsQconf(paramFile);
            else
                qp = new QParams(paramFile); // initialize general param storage
            qp.readParams(); // create associated files included in paQP and read params
            if (!validateQconf())
                return;
            // show dialog
            if (!showDialog()) { // if user cancelled dialog
                return; // do nothing
            }

            // prepare current OutlineHandler to process (read it using loaded paQP file)
            if (qp.paramFormat == QParams.QUIMP_11) { // if we have old format, read outlines from
                                                      // OutlineHandler
                runFromPAQP();
            } else if (qp.paramFormat == QParams.NEW_QUIMP) { // new format, everything is read by
                                                              // readParams, just extract it
                runFromQCONF();
                IJ.log("The new data file " + paramFile.getName()
                        + " has been updated by results of Q Analysis.");
            } else {
                throw new IllegalStateException("You can not be here in this time!");
            }

            File[] otherPaFiles = qp.findParamFiles(); // see #196
            if (otherPaFiles.length > 0) { // and process them if they are (that pointed by
                                           // user is skipped)
                YesNoCancelDialog yncd = new YesNoCancelDialog(IJ.getInstance(), "Batch Process?",
                        "\tBatch Process?\n\n"
                                + "Process other paQP files in the same folder with QAnalysis?"
                                + "\n[The same parameters will be used]\n"
                                + "If one has proceeded already with new file format (QCONF),"
                                + " this operation will update old files as well.");
                if (yncd.yesPressed()) {
                    ArrayList<String> runOn = new ArrayList<String>(otherPaFiles.length);
                    this.closeAllImages();

                    // if user agreed iterate over found files
                    // (except that loaded explicitly by user)
                    for (int j = 0; j < otherPaFiles.length; j++) {
                        IJ.log("Running on " + otherPaFiles[j].getAbsolutePath());
                        paramFile = otherPaFiles[j];
                        qp = new QParams(paramFile);
                        qp.readParams();
                        Qp.setup(qp);
                        oH = new OutlineHandler(qp); // prepare current OutlineHandler
                        if (!oH.readSuccess) {
                            LOGGER.error("OutlineHandlers could not be read!");
                            return;
                        }
                        run(); // run on current OutlineHandler
                        runOn.add(otherPaFiles[j].getName());
                        this.closeAllImages();
                    }
                    IJ.log("\n\nBatch - Successfully ran QAnalysis on:");
                    for (int i = 0; i < runOn.size(); i++) {
                        IJ.log(runOn.get(i));
                    }
                } else {
                    return; // no batch processing
                }
            }
            IJ.log("QuimP Analysis complete");
            IJ.showStatus("Finished");
        } catch (QuimpException e) {
            LOGGER.debug(e.getMessage(), e);
            LOGGER.error("Problem with running Q Analysis: " + e.getMessage());
        }
    }

    /**
     * Validate whether loaded QCONF file contains correct data.
     * <p>
     * Check for presence ECMM data in loaded QCONF and for presence Q Analysis data. If Q Analysis
     * has been done on this file user must confirm overriding.  
     * 
     * @return <tt>true</tt> when data are correct or user agreed for overriding Q Analysis data
     * @throws QuimpException When there is no ECMM data in file
     */
    private boolean validateQconf() throws QuimpException {
        if (qp == null) {
            throw new QuimpException("QCONF file not loaded");
        }
        if (qp.paramFormat != QParams.NEW_QUIMP) // do not check if old format
            return true;
        if (qp.getLoadedDataContainer().ECMMState == null) {
            throw new QuimpException("ECMM data not found in QCONF file. Run ECMM first.");
        }
        if (qp.getLoadedDataContainer().QState != null) {
            YesNoCancelDialog ync;
            ync = new YesNoCancelDialog(IJ.getInstance(), "Overwrite",
                    "You are about to override previous results. Is it ok?");
            if (!ync.yesPressed())
                return false;
        }
        return true;
    }

    /**
     * Run Q Analysis if input was QCONF.
     * <p>
     * Saves updated QCONF.
     * <p>
     * <b>Warning</b><p>
     * {@link #run()} updates also {@link DataContainer#ECMMState ECMMState} by modifying fields in
     * Outlines that are accessed by reference here. 
     * 
     * @throws QuimpException when saving failed or there is no ECMM data in file.
     */
    private void runFromQCONF() throws QuimpException {
        int i = 0;
        Iterator<OutlineHandler> oI = qp.getLoadedDataContainer().ECMMState.oHs.iterator();
        ArrayList<STmap> tmp = new ArrayList<>();
        while (oI.hasNext()) {
            qp.currentHandler = i++; // set current handler number. For compatibility
            Qp.setup(qp); // copy selected data from general QParams to local storage
            oH = oI.next();
            run();
            tmp.add(new STmap(stMap));
        }
        qp.getLoadedDataContainer().QState = tmp.toArray(new STmap[0]);
        qp.writeParams(); // save global container
    }

    /**
     * Run Q Analysis if input was paQP file.
     * 
     * @throws QuimpException when OutlineHandler can not be read
     */
    private void runFromPAQP() throws QuimpException {
        Qp.setup(qp); // copy selected data from general QParams to local storage
        oH = new OutlineHandler(qp); // load data from file
        if (!oH.readSuccess) {
            throw new QuimpException("Could not read OutlineHandler");
        }
        run();
    }

    /**
     * Display standard QuimP about message.
     */
    private void about() {
        IJ.log(new Tool().getQuimPversion());
    }

    /**
     * Main runner - do all calculations on current OutlineHandler object
     * 
     * @warning Process current \a OutlineHandler oH; object and modify it filling some fields from 
     * Vertex class
     */
    private void run() {
        if (oH.getSize() == 1) {
            Qp.singleImage = true;
            // only one frame - re lable node indices
            oH.getOutline(1).resetAllCoords();
        }

        Qp.convexityToPixels();

        stMap = new STmap(oH, Qp.mapRes);

        SVGplotter svgPlotter = new SVGplotter(oH, Qp.fps, Qp.scale, Qp.channel, Qp.outFile);
        svgPlotter.plotTrack(Qp.trackColor, Qp.increment);
        // svgPlotter.plotTrackAnim();
        svgPlotter.plotTrackER(Qp.outlinePlot);

        Qp.convexityToUnits(); // reset the covexity options to units (as they are static)
    }

    private boolean showDialog() {
        gd = new GenericDialog("Q Analysis Options", IJ.getInstance());

        gd.setOKLabel("RUN");

        gd.addMessage("Pixel width: " + Qp.scale + " \u00B5m\nFrame Interval: " + Qp.frameInterval
                + " sec");

        gd.addMessage("******* Cell track options (svg) *******");
        gd.addNumericField("Frame increment", Qp.increment, 0);
        gd.addChoice("Colour Map", QColor.colourMaps, QColor.colourMaps[0]);

        gd.addMessage("***** Motility movie options (svg) *****");
        gd.addChoice("Colour using", Qp.outlinePlots, Qp.outlinePlots[0]);

        gd.addMessage("********** Convexity options **********");
        gd.addNumericField("Sum over (\u00B5m)", Qp.sumCov, 2);
        gd.addNumericField("Smooth over (\u00B5m)", Qp.avgCov, 2);

        gd.addMessage("************* Map options *************");
        gd.addNumericField("Map resolution", Qp.mapRes, 0);

        // gd.addMessage("************* Head nodes **************");
        // gd.addChoice("Heads", headActions, headActions[0]);

        gd.setResizable(false);
        gd.showDialog();

        if (gd.wasCanceled()) {
            return false;
        }

        // Qp.scale = gd.getNextNumber();
        // Qp.setFPS(gd.getNextNumber());
        Qp.increment = (int) gd.getNextNumber();
        Qp.trackColor = gd.getNextChoice();
        Qp.outlinePlot = gd.getNextChoice();
        Qp.sumCov = gd.getNextNumber();
        Qp.avgCov = gd.getNextNumber();
        Qp.mapRes = (int) gd.getNextNumber();
        // Qp.headProcessing = gd.getNextChoice();

        return true;
    }

    private void closeAllImages() {
        int[] ids = ij.WindowManager.getIDList();
        for (int i = 0; i < ids.length; i++) {
            ij.WindowManager.getImage(ids[i]).close();
        }
    }
}

/**
 * Configuration class for Q_Analysis
 * 
 * @author rtyson
 *
 */
class Qp {

    static public File snQPfile;
    static public File stQPfile;
    static public File outFile;
    static public String filename;
    static public double scale = 1; // pixel size in microns
    static public double frameInterval = 1; // frames per second
    static int startFrame, endFrame;
    static public double fps = 1; // frames per second
    static public int increment = 1;
    static public String trackColor;
    static public String[] outlinePlots = { "Speed", "Fluorescence", "Convexity" };
    static public String outlinePlot;
    static public double sumCov = 1;
    static public double avgCov = 0;
    static public int mapRes = 400;
    static public int channel = 0;
    static boolean singleImage = false;
    static boolean useDialog = true;
    //static public String headProcessing; //!< Head processing algorithm. Define how to treat head position */
    final static boolean Build3D = false;

    static void convexityToPixels() {
        avgCov /= scale; // convert to pixels
        sumCov /= scale;
    }

    static void convexityToUnits() {
        avgCov *= scale; // convert to pixels
        sumCov *= scale;
    }

    public Qp() {
    }

    /**
     * Copies selected data from QParams to this object
     * 
     * @param qp General QuimP parameters object
     */
    static void setup(QParams qp) {
        Qp.snQPfile = qp.getSnakeQP();
        Qp.scale = qp.getImageScale();
        Qp.frameInterval = qp.getFrameInterval();
        Qp.filename = Tool.removeExtension(Qp.snQPfile.getName());
        Qp.outFile = new File(Qp.snQPfile.getParent() + File.separator + Qp.filename);
        Qp.startFrame = qp.getStartFrame();
        Qp.endFrame = qp.getEndFrame();
        // File p = qp.paramFile;
        fps = 1d / frameInterval;
        singleImage = false;
        useDialog = true;
    }
}
