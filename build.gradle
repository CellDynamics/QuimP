/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'baniuk' at '02/11/15 09:55' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */

// imports
import org.apache.tools.ant.filters.ReplaceTokens

// Apply the java plugin to add support for Java
allprojects {
	apply plugin: 'java'
	configurations {
  		provided
  		compile.extendsFrom provided
	}
	// In this section you declare where to find the dependencies of your project
	repositories {
	    // Use 'jcenter' for resolving your dependencies.
	    // You can declare any Maven/Ivy/file repository here.
	    jcenter()
	    mavenCentral()
	}
	// In this section you declare the dependencies for your production and test code
	dependencies {
	    // The production code uses the SLF4J logging API at compile time
	    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.4.1'
  		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.4.1'
  		provided 'net.imagej:ij:1.50d'
  		compile 'javax.vecmath:vecmath:1.5.2'

	    // Declare the dependency for your favourite test framework you want to use in your tests.
	    // TestNG is also supported by the Gradle Test task. Just change the
	    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
	    // 'test.useTestNG()' to your build script.
	    testCompile 'junit:junit:4.12'
	}
    task listProject { task -> println "Found project: $task.project.name" }
}

// TODO This var should be set in separate Deploy task. Will affect generatePluginConfig and jar 
def purpose = 'SNAPSHOT'

// generate plugins.config script for QuimP
// This task will run always, no dependency is required
task generatePluginConfig() {
	description 'Creates plugins.config file with current version. This file is required by IJ to configure plugin'
	// can't be (task: Copy) as it was not run in config stage but only after explicit call
	String version_from_file = new File("${rootDir}/QuimP_plugin/src/version").getText().replaceAll("\\s","")
	copy {
		from 'QuimP_plugin/Resources/main/java/uk/warwick/quimp/plugins.config'
		into 'QuimP_plugin/src/main/java/uk/warwick/quimp'
		filter(ReplaceTokens, tokens: [ver: version_from_file, purpose: purpose])
	}
	println '[INFO] Creating QuimP plugins.config file'
}

// executed for every subproject separately
subprojects {
/*	project(':DIC_') {
		dependencies {
	    	
		}
	}*/

	task getVersion {
		description 'Read version file from every project and create external properties with these values'
    	ext.version_from_file = new File("$projectDir/src/version").getText().replaceAll("\\s","")
    }
    // build jar file with correct names
	tasks.withType(Jar) {
		version = "$getVersion.version_from_file"
		classifier = 'SNAPSHOT'
		baseName = "$project.name"
		println "$project.name "+"$version "+"$classifier"
	}
	
	task ReleaseJar(type: Jar) {
		version = "$getVersion.version_from_file"
		classifier = 'RELEASE'
    	baseName = "$project.name"
    	println "$project.name "+"$version "+"$classifier"
    	manifest {
        attributes("Implementation-Title": "$project.name",
                   "Implementation-Version": version)
    	}
    	from { (configurations.compile-configurations.provided).collect { it.isDirectory() ? it : zipTree(it) } }
    	with jar
	}
	
	artifacts {
    	archives ReleaseJar
	}
	
	task doRelease(type: Copy, dependsOn: ReleaseJar) {
    	from 'build/libs/'
    	into "${rootDir}/Releases"
	} 
	
	// run separatelly to make copy of dependencies used in project
	task doSnapshot(type: Copy) {
    	// into "build/lib"
    	from configurations.runtime
    	into "$buildDir/dependencies/"
    	
	}
}

